function varargout = bendCursor_gui(varargin)
% BENDCURSOR_GUI MATLAB code for bendCursor_gui.fig
%      BENDCURSOR_GUI, by itself, creates a new BENDCURSOR_GUI or raises the existing
%      singleton*.

% Last Modified by GUIDE v2.5 23-Jun-2010 15:05:57

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @bendCursor_gui_OpeningFcn, ...
                   'gui_OutputFcn',  @bendCursor_gui_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before bendCursor_gui is made visible.
function bendCursor_gui_OpeningFcn(hObject, eventdata, handles, varargin)
    handles.output = hObject;
    
    % Validate inputs
    if nargin < 4
        error('Required inputs: time, bendAngles, threshMax');
    end
    
    % Initialize parameters
    time = varargin{1};
    bendAngles = varargin{2};
    threshMax = varargin{3};
    threshMin = -threshMax;
    epsilon = 0;

    if ~isreal(bendAngles)
        bendAngles = real(bendAngles);  % Use real part
        warning('Complex values detected in bending angles. Using real parts.');
    end
    
    % Parameters (adjust these based on your data)
    threshold = 8.0;       % Define "near zero" (e.g., |y| < 0.5)
    transition_width = 0.2; % Smooth transition width around threshold
    smoothing_window = 7;  % Window size for smoothing (odd integer)

    % Step 1: Smooth the entire signal (temporarily)
    smoothed_y = movmean(bendAngles, smoothing_window);

    % Step 2: Create a blending weight matrix
    weight = 1 ./ (1 + exp(20*(abs(bendAngles) - threshold))); % Sigmoid transition


    % Step 3: Blend original and smoothed data
    bendAngles = weight .* smoothed_y + (1 - weight) .* bendAngles;

    % Find zero crossings (ensure row vector)
    rawZC = find((bendAngles(1:end-1) < -epsilon & bendAngles(2:end) > epsilon) | ...
            (bendAngles(1:end-1) > epsilon & bendAngles(2:end) < -epsilon));
    rawZC = rawZC(:)';
    zcIndices = unique([1, rawZC, length(bendAngles)]);
    zeroCrossingTimes = time(zcIndices);
    
    % Process segments with conditional comparison
    [maxTimes, posAngles, minTimes, negAngles] = processSegments(zcIndices, time, bendAngles, threshMax, threshMin);
    
    % Store data and plot
    handles.threshMax = threshMax;
    handles.threshMin = threshMin;
    handles.auto_maxTimes = maxTimes;
    handles.auto_posAngles = posAngles;
    handles.auto_minTimes = minTimes;
    handles.auto_negAngles = negAngles;

    % New code 82-117
    % Create structures and combine
    structPos = struct('Time', maxTimes(:), 'BendingAngle', posAngles(:));
    structNeg = struct('Time', minTimes(:), 'BendingAngle', negAngles(:));
    
    allTimes = [structPos.Time; structNeg.Time];
    allBending = [structPos.BendingAngle; structNeg.BendingAngle];
    
    % Sort by time
    [sortedTimes, sortIdx] = sort(allTimes);
    sortedBending = allBending(sortIdx);
    combinedSortedStruct = struct('Time', sortedTimes, 'BendingAngle', sortedBending);

    %disp(combinedSortedStruct.BendingAngle)

    % Apply alternating filter
    filteredStruct = filterAlternatingExtrema(combinedSortedStruct);

    % Calculate filtered values
    filteredPos = filteredStruct.BendingAngle(filteredStruct.BendingAngle > 0);
    filteredNeg = filteredStruct.BendingAngle(filteredStruct.BendingAngle < 0);
    filteredmaxTimes = filteredStruct.Time(filteredStruct.BendingAngle > 0);
    filteredminTimes = filteredStruct.Time(filteredStruct.BendingAngle < 0);
    
    axes(handles.win);
    cla reset;
    plot(time, bendAngles, 'b-', 'LineWidth', 1.5); hold on;
    if ~isempty(filteredmaxTimes)
        plot(filteredmaxTimes, filteredPos, 'ro', 'MarkerFaceColor','r', 'MarkerSize',8);
    end
    if ~isempty(filteredminTimes)
        plot(filteredminTimes, filteredNeg, 'go', 'MarkerFaceColor','g', 'MarkerSize',8);
    end
    
    line([min(time) max(time)], [0 0], 'Color', '#D3D3D3', 'LineWidth', 0.5);
    line([min(time) max(time)], [threshMax threshMax], 'Color', '#FF69B4', 'LineWidth', 0.5,'LineStyle', '--'); 
    line([min(time) max(time)], [threshMin threshMin], 'Color', '#FF69B4', 'LineWidth', 0.5, 'LineStyle', '--');
    % Define how much to shift left
    xShift = 10;  % adjust this value as needed

    % Plot a combined text label with a horizontal line + label
    text( ...
        max(time) - xShift, ...                         % X-position shifted left
        max(bendAngles) * 1.1, ...                      % Y-position
        '------ Threshold', ...                         % Line followed by label
        'Color', '#FF69B4', ...                         % Magenta line + text
        'HorizontalAlignment', 'left', ...
        'VerticalAlignment', 'bottom', ...
        'FontSize', 10, ...
        'BackgroundColor', 'none', ...
        'Margin', 1 ...
    );

    % text( ...
    % max(time), ...                   % X-position: end of the time axis
    % max(bendAngles) * 1.1, ...             % Y-position: top of the bend trace
    % '------ ', ...
    % 'Color', '#FF69B4', ...      % Dark gray (RGB: 0.4,0.4,0.4)
    % 'HorizontalAlignment', 'left', ...  % Align text to the right edge
    % 'VerticalAlignment', 'bottom', ...      % Align text to the top edge
    % 'FontSize', 10, ...
    % 'BackgroundColor', 'none', ...   % Transparent background
    % 'Margin', 1 ...                  % Small margin for readability
    %  );
    % 
    % text( ...
    % max(time), ...                   % X-position: end of the time axis
    % max(bendAngles) * 1.1, ...             % Y-position: top of the bend trace
    % 'Threshold ', ...
    % 'Color', 'k', ...      % Dark gray (RGB: 0.4,0.4,0.4)
    % 'HorizontalAlignment', 'left', ...  % Align text to the right edge
    % 'VerticalAlignment', 'bottom', ...      % Align text to the top edge
    % 'FontSize', 10, ...
    % 'BackgroundColor', 'none', ...   % Transparent background
    % 'Margin', 1 ...                  % Small margin for readability
    %  );
    

    title('Maximum Bend Detection');
    xlabel('Time (s)'); 
    ylabel('Bending Angle (Â°)');
    hold off;
    datacursormode on;

    guidata(hObject, handles);
    uiwait(handles.figure1);

function [maxTimes, posAngles, minTimes, negAngles] = processSegments(zcIndices, time, bendAngles, threshMax, threshMin)
    maxTimes = []; posAngles = [];
    minTimes = []; negAngles = [];
    
    k = 1;
    while k < length(zcIndices)
        currentSeg = zcIndices(k):zcIndices(k+1);
        if numel(currentSeg) < 2
            k = k + 1;
            continue;
        end
        
        % Determine segment polarity
        isNegative = bendAngles(zcIndices(k)) < 0;
        
        if isNegative
            % --- Process negative segment ---
            [currentVal, idx] = max(bendAngles(currentSeg));
            currentTime = time(currentSeg(idx));
            
            if currentVal >= threshMax
                % Check next segment (k+1) validity
                nextSegValid = true;
                if (k+1) < length(zcIndices)
                    nextSeg = zcIndices(k+1):zcIndices(k+2);
                    [nextVal, ~] = min(bendAngles(nextSeg));
                    nextSegValid = (nextVal <= threshMin);
                end
                
                if ~nextSegValid
                    % Check next-next segment (k+2)
                    if (k+2) < length(zcIndices)
                        nextNextSeg = zcIndices(k+2):zcIndices(k+3);
                        [nextNextVal, nnIdx] = max(bendAngles(nextNextSeg));
                        nextNextTime = time(nextNextSeg(nnIdx));
                        
                        if nextNextVal >= threshMax
                            % Compare and keep better value
                            if currentVal > nextNextVal
                                maxTimes(end+1) = currentTime;
                                posAngles(end+1) = currentVal;
                            else
                                maxTimes(end+1) = nextNextTime;
                                posAngles(end+1) = nextNextVal;
                            end
                            k = k + 3;  % Skip k+1 and k+2
                        else
                            maxTimes(end+1) = currentTime;
                            posAngles(end+1) = currentVal;
                            k = k + 1;
                        end
                    else
                        maxTimes(end+1) = currentTime;
                        posAngles(end+1) = currentVal;
                        k = k + 1;
                    end
                else
                    maxTimes(end+1) = currentTime;
                    posAngles(end+1) = currentVal;
                    k = k + 1;
                end
            else
                k = k + 1;
            end
            
        else
            % --- Process positive segment ---
            [currentVal, idx] = min(bendAngles(currentSeg));
            currentTime = time(currentSeg(idx));
            
            if currentVal <= threshMin
                % Check next segment (k+1) validity
                nextSegValid = true;
                if (k+1) < length(zcIndices)
                    nextSeg = zcIndices(k+1):zcIndices(k+2);
                    [nextVal, ~] = max(bendAngles(nextSeg));
                    nextSegValid = (nextVal >= threshMax);
                end
                
                if ~nextSegValid
                    if (k+2) < length(zcIndices)
                        nextNextSeg = zcIndices(k+2):zcIndices(k+3);
                        [nextNextVal, nnIdx] = min(bendAngles(nextNextSeg));
                        nextNextTime = time(nextNextSeg(nnIdx));
                        
                        if nextNextVal <= threshMin
                            if currentVal < nextNextVal
                                minTimes(end+1) = currentTime;
                                negAngles(end+1) = currentVal;
                            else
                                minTimes(end+1) = nextNextTime;
                                negAngles(end+1) = nextNextVal;
                            end
                            k = k + 3;
                        else
                            minTimes(end+1) = currentTime;
                            negAngles(end+1) = currentVal;
                            k = k + 1;
                        end
                    else
                        minTimes(end+1) = currentTime;
                        negAngles(end+1) = currentVal;
                        k = k + 1;
                    end
                else
                    minTimes(end+1) = currentTime;
                    negAngles(end+1) = currentVal;
                    k = k + 1;
                end
            else
                k = k + 1;
            end
        end
    end


% --- Outputs from this function are returned to the command line.
function varargout = bendCursor_gui_OutputFcn(hObject, eventdata, handles) 
    varargout{1} = handles.output;
    delete(gcf);

% --- Executes on button press in finish.
function finish_Callback(hObject, eventdata, handles)
    dcm_obj = datacursormode(gcf);
    cursorInfo = getCursorInfo(dcm_obj);
    disp(cursorInfo)
    
    % Get thresholds from handles
    threshMax = handles.threshMax;
    threshMin = handles.threshMin;
    
    % Initialize arrays for final positive and negative candidates.
    finalPos = [];
    finalNeg = [];
    finalmaxTimes = [];
    finalminTimes = [];
    
    
    % Process manual selections
    for i = 1:length(cursorInfo)
        pos = cursorInfo(i).Position;  % [time, bending_angle]
        if pos(2) >= threshMax
            finalPos = [finalPos, pos(2)];
            finalmaxTimes = [finalmaxTimes, pos(1)];
        elseif pos(2) <= threshMin
            finalNeg = [finalNeg, pos(2)];
            finalminTimes = [finalminTimes, pos(1)];
        end
    end
    
    % Fallback to auto-detected values if no manual selections
    if isempty(finalPos)
        finalPos = handles.auto_posAngles;
        finalmaxTimes = handles.auto_maxTimes;
    end
    if isempty(finalNeg)
        finalNeg = handles.auto_negAngles;
        finalminTimes = handles.auto_minTimes;
    end
    
    % Create structures and combine
    structPos = struct('Time', finalmaxTimes(:), 'BendingAngle', finalPos(:));
    structNeg = struct('Time', finalminTimes(:), 'BendingAngle', finalNeg(:));
    
    allTimes = [structPos.Time; structNeg.Time];
    allBending = [structPos.BendingAngle; structNeg.BendingAngle];
    
    % Sort by time
    [sortedTimes, sortIdx] = sort(allTimes);
    sortedBending = allBending(sortIdx);
    combinedSortedStruct = struct('Time', sortedTimes, 'BendingAngle', sortedBending);
        
    % Apply alternating filter
    filteredStruct = filterAlternatingExtrema(combinedSortedStruct);
    %disp(filteredStruct.BendingAngle)
    % Calculate excursion from filtered values
    filteredPos = filteredStruct.BendingAngle(filteredStruct.BendingAngle > 0);
    filteredNeg = filteredStruct.BendingAngle(filteredStruct.BendingAngle < 0);
    
    if ~isempty(filteredPos)
        meanPos = mean(filteredPos);
    else 0;
    end
    if ~isempty(filteredNeg)
        meanNeg = mean(filteredNeg);
    else 0;
    end
    excursion = meanPos - meanNeg;
    
    handles.output = excursion;
    guidata(hObject, handles);
    uiresume;

   function filteredStruct = filterAlternatingExtrema(combinedSortedStruct)
    bendingAngles = combinedSortedStruct.BendingAngle(:);
    times = combinedSortedStruct.Time(:);
    
    if isempty(bendingAngles)
        filteredStruct = struct('Time', [], 'BendingAngle', []);
        return;
    end

    filteredTime = [];
    filteredBending = [];
    
    currentSign = sign(bendingAngles(1));
    currentExtremum = bendingAngles(1);
    extremumTime = times(1);

    for i = 2:length(bendingAngles)
        currentAngle = bendingAngles(i);
        currentAngleSign = sign(currentAngle);

        if currentAngleSign == currentSign
            % Update extremum for consecutive same-sign values
            if currentSign > 0
                if currentAngle > currentExtremum
                    currentExtremum = currentAngle;
                    extremumTime = times(i);
                end
            else
                if currentAngle < currentExtremum
                    currentExtremum = currentAngle;
                    extremumTime = times(i);
                end
            end
        else
            % Store previous extremum and start new group
            filteredBending = [filteredBending; currentExtremum];
            filteredTime = [filteredTime; extremumTime];
            
            currentSign = currentAngleSign;
            currentExtremum = currentAngle;
            extremumTime = times(i);
        end
    end

    % Add the last group's extremum
    filteredBending = [filteredBending; currentExtremum];
    filteredTime = [filteredTime; extremumTime];

    % Create filtered structure
    filteredStruct = struct(...
        'Time', filteredTime, ...
        'BendingAngle', filteredBending ...
    );